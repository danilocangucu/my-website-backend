name: Deploy to EC2

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Create .env file
        run: |
            echo "DB_USER=${{ secrets.DB_USER }}" >> .env
            echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> .env
            echo "DB_HOST=${{ secrets.DB_HOST }}" >> .env
            echo "DB_PORT=${{ secrets.DB_PORT }}" >> .env
            echo "DB_NAME=${{ secrets.DB_NAME }}" >> .env
            echo "GOLDENRACK_AMI_ID=${{ secrets.GOLDENRACK_AMI_ID }}" >> .env
            echo "LOVETOKENS_AMI_ID=${{ secrets.LOVETOKENS_AMI_ID }}" >> .env
            echo "ACTION_START=${{ secrets.ACTION_START }}" >> .env
            echo "ACTION_STOP=${{ secrets.ACTION_STOP }}" >> .env
            echo "ACTION_TERMINATE=${{ secrets.ACTION_TERMINATE }}" >> .env
            echo "LAMBDA_FUNCTION_URL=${{ secrets.LAMBDA_FUNCTION_URL }}" >> .env
            echo "ZOHO_EMAIL=${{ secrets.ZOHO_EMAIL }}" >> .env
            echo "ZOHO_PASSWORD=${{ secrets.ZOHO_PASSWORD }}" >> .env
            echo "MY_EMAIL=${{ secrets.MY_EMAIL }}" >> .env

      - name: Build the app
        run: npm run build

      - name: Generate checksums for package files
        run: |
          md5sum package.json > package.json.md5
          md5sum package-lock.json > package-lock.json.md5

      - name: Decode SSH Key
        run: echo "${{ secrets.EC2_SSH_KEY }}" | base64 --decode > my-website-server.pem

      - name: Set permissions
        run: chmod 600 my-website-server.pem

      - name: Stop PM2
        run: |
          ssh -i my-website-server.pem -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} "pm2 stop my-website-backend"
      
      - name: Remove old .env on EC2
        run: |
          ssh -i my-website-server.pem -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} "rm -f ~/my-website-backend/.env"

      - name: Copy new .env to EC2
        run: |
            scp -i my-website-server.pem -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null .env ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:~/my-website-backend/.env

      - name: Remove old dist directory
        run: |
          ssh -i my-website-server.pem -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} "rm -rf ~/my-website-backend/dist/"

      - name: Create new dist directory
        run: |
          ssh -i my-website-server.pem -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} "mkdir -p ~/my-website-backend/dist/"

      - name: Copy dist & checksums to EC2
        run: |
          scp -i my-website-server.pem -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -r dist package.json.md5 package-lock.json.md5 ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:~/my-website-backend/
      
      - name: Check checksums and conditionally copy package files
        run: |
            ssh -i my-website-server.pem -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} "
              cd ~/my-website-backend
  
              if ! md5sum -c package.json.md5 || ! md5sum -c package-lock.json.md5; then
                echo 'Changes detected in package.json or package-lock.json. Copying files and installing dependencies...'
  
                exit 1
              else
                echo 'No changes in package.json or package-lock.json. Skipping npm install.'
              fi
            "
  
      - name: Copy package files to EC2 and install dependencies
        if: ${{ failure() }}
        run: |
          scp -i my-website-server.pem -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null package.json package-lock.json ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:~/my-website-backend/

          ssh -i my-website-server.pem -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} "
            cd ~/my-website-backend
            npm install
          "

      - name: Restart PM2
        run: |
          ssh -i my-website-server.pem -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} "pm2 restart my-website-backend"